/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SamplePrimarySaleERC721Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLOCATION"
      | "addToWhitelist"
      | "clearMinted"
      | "erc20"
      | "erc20Decimals"
      | "erc721"
      | "imx"
      | "imxShare"
      | "isStarted"
      | "maxSupply"
      | "mintErc20"
      | "mintErc20WL"
      | "mintFree"
      | "mintFreeWL"
      | "mintNative"
      | "mintNativeWL"
      | "minted"
      | "owner"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "setErc20"
      | "setErc721"
      | "setImx"
      | "startSale"
      | "stopSale"
      | "totalMinted"
      | "transferOwnership"
      | "whitelist"
      | "withdrawErc20"
      | "withdrawNative"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearMinted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Decimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "erc721", values?: undefined): string;
  encodeFunctionData(functionFragment: "imx", values?: undefined): string;
  encodeFunctionData(functionFragment: "imxShare", values?: undefined): string;
  encodeFunctionData(functionFragment: "isStarted", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintErc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintErc20WL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintFree", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintFreeWL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNativeWL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minted", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setErc20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setErc721",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setImx", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "startSale", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ALLOCATION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imxShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStarted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintErc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintErc20WL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFreeWL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNativeWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setErc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setErc721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setImx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SamplePrimarySaleERC721 extends BaseContract {
  connect(runner?: ContractRunner | null): SamplePrimarySaleERC721;
  waitForDeployment(): Promise<this>;

  interface: SamplePrimarySaleERC721Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  addToWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  clearMinted: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  erc20: TypedContractMethod<[], [string], "view">;

  erc20Decimals: TypedContractMethod<[], [bigint], "view">;

  erc721: TypedContractMethod<[], [string], "view">;

  imx: TypedContractMethod<[], [string], "view">;

  imxShare: TypedContractMethod<[], [bigint], "view">;

  isStarted: TypedContractMethod<[], [boolean], "view">;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  mintErc20: TypedContractMethod<[], [void], "nonpayable">;

  mintErc20WL: TypedContractMethod<[], [void], "nonpayable">;

  mintFree: TypedContractMethod<[], [void], "nonpayable">;

  mintFreeWL: TypedContractMethod<[], [void], "nonpayable">;

  mintNative: TypedContractMethod<[], [void], "payable">;

  mintNativeWL: TypedContractMethod<[], [void], "payable">;

  minted: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeFromWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setErc20: TypedContractMethod<
    [_erc20: AddressLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  setErc721: TypedContractMethod<[_erc721: AddressLike], [void], "nonpayable">;

  setImx: TypedContractMethod<[_imx: AddressLike], [void], "nonpayable">;

  startSale: TypedContractMethod<[], [void], "nonpayable">;

  stopSale: TypedContractMethod<[], [void], "nonpayable">;

  totalMinted: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  withdrawErc20: TypedContractMethod<[], [void], "nonpayable">;

  withdrawNative: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearMinted"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20Decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc721"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "imx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "imxShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintErc20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintErc20WL"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintFree"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintFreeWL"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintNative"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "mintNativeWL"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "minted"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setErc20"
  ): TypedContractMethod<
    [_erc20: AddressLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setErc721"
  ): TypedContractMethod<[_erc721: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setImx"
  ): TypedContractMethod<[_imx: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSale"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopSale"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawErc20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNative"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
